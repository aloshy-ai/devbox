name: Build and Publish Multi-Arch Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-push:
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            nix-system: x86_64-linux
            platforms: linux/amd64
            os-arch: linux/amd64
          - arch: arm64
            nix-system: aarch64-linux
            platforms: linux/arm64
            os-arch: linux/arm64
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: ${{ secrets.CACHIX_CACHE || 'nix-community' }}
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ !secrets.CACHIX_AUTH_TOKEN }}
      
      - name: Build Docker image with Nix
        run: nix build .#dockerConfigurations.devcontainer-${{ matrix.arch }}
        env:
          NIX_CONFIG: "experimental-features = nix-command flakes"
      
      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's|refs/tags/v||')
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi
          
          # Extract major.minor version if this is a tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1,2)
            echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT
          fi
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/devcontainer
          tags: |
            type=raw,value=nixos:${{ steps.version.outputs.version }}-${{ matrix.arch }}
            type=raw,value=nixos:${{ steps.version.outputs.major_minor }}-${{ matrix.arch }},enable=${{ steps.version.outputs.is_tag == 'true' }}
            type=raw,value=nixos:latest-${{ matrix.arch }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Import image to Docker
        run: |
          # Find the actual image path from the result symlink
          STORE_PATH=$(nix path-info -r result | grep tarball)
          echo "Using Nix store path: $STORE_PATH"
          
          # Load the image from the correct path
          docker load < "$STORE_PATH"
          
          # Get the loaded image ID
          IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV
      
      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ matrix.platforms }}
          load: false
          provenance: false
          build: false
          inputs: result

  create-manifest:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's|refs/tags/v||')
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi
          
          # Extract major.minor version if this is a tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1,2)
            echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push latest manifest
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devcontainer:nixos:latest
          provenance: false
          build: false
          merge-tag: true

      - name: Create and push version manifest (if tagged)
        if: ${{ steps.version.outputs.is_tag == 'true' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devcontainer:nixos:${{ steps.version.outputs.version }}
          provenance: false
          build: false
          merge-tag: true

      - name: Create and push major.minor manifest (if tagged)
        if: ${{ steps.version.outputs.is_tag == 'true' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devcontainer:nixos:${{ steps.version.outputs.major_minor }}
          provenance: false
          build: false
          merge-tag: true
